#!/bin/bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";
ROOT=${DIR}/..;

# environment variables
source ${ROOT}/.env;

sedi()
{
    sed --version >/dev/null 2>&1 && sed -i -- "$@" || sed -i "" "$@";
}

prepare()
{
    if [ -f ${ROOT}/docker-compose.yml ]; then
        rm -f ${ROOT}/docker-compose.yml;
    fi;

    cp ${ROOT}/docker-compose.yml.template ${ROOT}/docker-compose.yml;

    # apache
    sedi "s/\${APACHE_SERVICE_NAME}/${APACHE_SERVICE_NAME}/g" ${ROOT}/docker-compose.yml;
    sedi "s/\${APACHE_CONTAINER_NAME}/${APACHE_CONTAINER_NAME}/g" ${ROOT}/docker-compose.yml;
    sedi "s/- VIRTUAL_HOST=\${APACHE_VIRTUAL_HOST}/- VIRTUAL_HOST=${APACHE_VIRTUAL_HOST}/g" ${ROOT}/docker-compose.yml;
    sedi "s/\${USER_ID}/$(id -u)/g" ${ROOT}/docker-compose.yml; # permissions issues workaround
    sedi "s/\${NGINX_PROXY_NAME}/${NGINX_PROXY_NAME}/g" ${ROOT}/docker-compose.yml;

    if [ ${APACHE_ENABLE_XDEBUG} = 0 ]; then
        sedi "s/- .\/apache\/ext-xdebug.ini/#- .\/apache\/ext-xdebug.ini/g" ${ROOT}/docker-compose.yml;
    fi;

    # mysql
    sedi "s/\${MYSQL_SERVICE_NAME}/${MYSQL_SERVICE_NAME}/g" ${ROOT}/docker-compose.yml;
    sedi "s/\${MYSQL_CONTAINER_NAME}/${MYSQL_CONTAINER_NAME}/g" ${ROOT}/docker-compose.yml;
    sedi "s/MYSQL_ROOT_PASSWORD: \${MYSQL_ROOT_PASSWORD}/MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}/g" ${ROOT}/docker-compose.yml;
    sedi "s/MYSQL_DATABASE: \${MYSQL_DATABASE}/MYSQL_DATABASE: ${MYSQL_DATABASE}/g" ${ROOT}/docker-compose.yml;
    sedi "s/MYSQL_USER: \${MYSQL_USER}/MYSQL_USER: ${MYSQL_USER}/g" ${ROOT}/docker-compose.yml;
    sedi "s/MYSQL_PASSWORD: \${MYSQL_PASSWORD}/MYSQL_PASSWORD: ${MYSQL_PASSWORD}/g" ${ROOT}/docker-compose.yml;

    if [ ${MYSQL_ENABLE_PORTS_MAPPING} = 0 ]; then
        sedi "s/\${MYSQL_PORTS_MAPPING}/#\${MYSQL_PORTS_MAPPING}/g" ${ROOT}/docker-compose.yml;
        sedi "s/- \${MYSQL_HOST_PORT_TO_MAP}/#- \${MYSQL_HOST_PORT_TO_MAP}/g" ${ROOT}/docker-compose.yml;
    else
        sedi "s/\${MYSQL_PORTS_MAPPING}/ports/g" ${ROOT}/docker-compose.yml;
        sedi "s/\${MYSQL_HOST_PORT_TO_MAP}/${MYSQL_HOST_PORT_TO_MAP}/g" ${ROOT}/docker-compose.yml;
    fi;

    if [ -f ${ROOT}/docker-compose-nginx.yml ]; then
        rm -f ${ROOT}/docker-compose-nginx.yml;
    fi;

    cp ${ROOT}/docker-compose-nginx.yml.template ${ROOT}/docker-compose-nginx.yml;

    # nginx
    sedi "s/\${NGINX_SERVICE_NAME}/${NGINX_SERVICE_NAME}/g" ${ROOT}/docker-compose-nginx.yml;
    sedi "s/\${NGINX_CONTAINER_NAME}/${NGINX_CONTAINER_NAME}/g" ${ROOT}/docker-compose-nginx.yml;

    if [ ${NGINX_ENABLE_SSL} = 0 ]; then
        sedi "s/- \${NGINX_CERTS_PATH}/#- \${NGINX_CERTS_PATH}/g" ${ROOT}/docker-compose-nginx.yml;
    else
        sedi "s/- \${NGINX_CERTS_PATH}/- $(echo ${NGINX_CERTS_PATH} | sed -e 's/\\/\\\\/g; s/\//\\\//g; s/&/\\\&/g')/g" ${ROOT}/docker-compose-nginx.yml;
    fi;

    # networks
    sedi "s/\${BASE_NETWORK}/${BASE_NETWORK}/g" ${ROOT}/docker-compose.yml;
    sedi "s/\${PROXY_NETWORK}/${PROXY_NETWORK}/g" ${ROOT}/docker-compose.yml;
    sedi "s/\${PROXY_NETWORK}/${PROXY_NETWORK}/g" ${ROOT}/docker-compose-nginx.yml;
}

prepare;

exit 0;